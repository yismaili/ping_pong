import { CreateGameDto } from './dto/create-game.dto';
import { User } from 'src/typeorm/entities/User.entity';
import { Profile } from 'src/typeorm/entities/Profile.entity';
import { Relation } from 'src/typeorm/entities/Relation.entity';
import { HistoryEntity } from 'src/typeorm/entities/History.entity';
import { Achievement } from 'src/typeorm/entities/Achievement.entity';
import { ChatRoom } from 'src/typeorm/entities/chat-room.entity';
import { Repository } from 'typeorm';
import { UpdateResultDto } from './dto/update-result.dto';
import { Socket, Server } from 'socket.io';
import { SetHistoryDto } from './dto/set-history.dto';
import { AcceptRequestDto } from './dto/accept-request.dto';
import { PongGame } from './pong-game/pong-game';
export declare class GameService {
    private userRepository;
    private profileRepository;
    private relationRepository;
    private historyRepository;
    private achievementRepository;
    private chatRepository;
    players: Map<string, string[]>;
    constructor(userRepository: Repository<User>, profileRepository: Repository<Profile>, relationRepository: Repository<Relation>, historyRepository: Repository<HistoryEntity>, achievementRepository: Repository<Achievement>, chatRepository: Repository<ChatRoom>);
    createGameRandom(createGameDto: CreateGameDto, playerId: Socket, server: Server, pongGame: PongGame): Promise<void>;
    getGameRoom(username: string): Promise<any>;
    handleLeaveRoom(client: Socket, roomName: string): Promise<void>;
    statusInGame(username: string): Promise<any>;
    statusOutGame(username: string): Promise<any>;
    waitMinute(): Promise<void>;
    startGame(roomName: string, playerId: Socket, server: Server, pongGame: PongGame): Promise<void>;
    getUser(client: Socket): Promise<any>;
    checkRelatonStatus(rootUsername: string, friendUsername: string): Promise<0 | 1>;
    matchingFriends(createGameDto: CreateGameDto, playerId: Socket, server: Server): Promise<void>;
    acceptRequest(acceptRequestDto: AcceptRequestDto, playerId: Socket, server: Server, pongGame: PongGame): Promise<any>;
    rejectrequest(acceptRequestDto: AcceptRequestDto, playerId: Socket, server: Server): Promise<any>;
    addHistory(addhistory: SetHistoryDto): Promise<any>;
    updateWin(username: string): Promise<any>;
    updateLos(username: string): Promise<any>;
    updateXp(username: string): Promise<any>;
    updateScore(username: string): Promise<any>;
    updateLevel(username: string): Promise<any>;
    getGameRequest(createGameDto: CreateGameDto): Promise<any>;
    accepteGameRequest(createGameDto: CreateGameDto): Promise<any>;
    UpdateResult(updateResultDto: UpdateResultDto): Promise<HistoryEntity>;
    handleConnection(socketId: Socket, username: string): Promise<void>;
    setStatusOfUser(socketId: Socket, username: string): Promise<void>;
    refreshGame(socketId: Socket): Promise<void>;
    isconnected: Map<string, Socket[]>;
}
