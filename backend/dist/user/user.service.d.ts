import { AchievementDto } from 'src/auth/dtos/achievement.dto';
import { HistoryDto } from 'src/auth/dtos/history.dto';
import { RelationDto } from 'src/auth/dtos/relation.dto';
import { Achievement } from 'src/typeorm/entities/Achievement.entity';
import { HistoryEntity } from 'src/typeorm/entities/History.entity';
import { Profile } from 'src/typeorm/entities/Profile.entity';
import { Relation } from 'src/typeorm/entities/Relation.entity';
import { User } from 'src/typeorm/entities/User.entity';
import { ChatRoom } from 'src/typeorm/entities/chat-room.entity';
import { Repository } from 'typeorm';
import { IAuthenticate } from './utils/types';
export declare class UserService {
    private userRepository;
    private profileRepository;
    private relationRepository;
    private historyRepository;
    private achievementRepository;
    private chatRepository;
    constructor(userRepository: Repository<User>, profileRepository: Repository<Profile>, relationRepository: Repository<Relation>, historyRepository: Repository<HistoryEntity>, achievementRepository: Repository<Achievement>, chatRepository: Repository<ChatRoom>);
    findProfileByUsername(userName: string): Promise<any>;
    uploadImageToCould(fileUrl: string): Promise<any>;
    updateProfileByUsername(userName: string, userData: any, imageData: any): Promise<IAuthenticate>;
    addUniquename(username: string, uniquename: string): Promise<any>;
    findAllHistoryOfUser(username: string): Promise<HistoryDto[]>;
    searchToFrindByUsername(username: string, secondUsername: string): Promise<any>;
    historyFriend(username: string, secondUsername: string): Promise<any>;
    searchToUserByUsername(username: string, secondUsername: string): Promise<any>;
    addAchievementOfUser(userName: string, addAchievementOfUser: AchievementDto): Promise<any>;
    findAllAchievementOfUser(username: string): Promise<AchievementDto[]>;
    sendRequest(userName: string, secondUsername: string): Promise<any>;
    findAllFriendsOfUser(username: string): Promise<RelationDto[]>;
    findAllBlockedOfUser(username: string): Promise<RelationDto[]>;
    getAllRequestsOfUser(username: string): Promise<RelationDto[]>;
    getAllRequistsSendFromUser(username: string): Promise<RelationDto[]>;
    blockUser(username: string, secondUser: string): Promise<any>;
    unblockUser(username: string, secondUser: string): Promise<any>;
    acceptRequest(username: string, secondUser: string): Promise<any>;
    rejectRequest(username: string, secondUser: string): Promise<any>;
    cancelRequist(username: string, secondUser: string): Promise<any>;
    cancelRelation(username: string, secondUser: string): Promise<any>;
    getStatusOfUsers(username: string): Promise<RelationDto[]>;
    setTwoFactorAuthenticationSecret(secret: string, username: string): Promise<void>;
    turnOnTwoFactorAuthentication(username: string): Promise<void>;
    turnOffTwoFactorAuthentication(username: string): Promise<void>;
    setUserstatus(username: string, status: string): Promise<any>;
}
